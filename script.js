const videoElement = document.getElementById('webcam');
const canvasElement = document.getElementById('overlay');
const canvasCtx = canvasElement.getContext('2d');
let earringImg = null, necklaceImg = null;
let earringSrc = '', necklaceSrc = '';
let smoothedLandmarks = null, lastStableLandmarks = null;
let lastSnapshotDataURL = '';
const SMOOTHING_FACTOR = 0.9;
const jsonURL = "jewelry-data.json";
function loadImage(src) { return new Promise(res => { const img = new Image(); img.crossOrigin = "anonymous"; img.src = src; img.onload = () => res(img); img.onerror = () => res(null); }); }
function changeEarring(src) { earringSrc = src; loadImage(earringSrc).then(img => earringImg = img); }
function changeNecklace(src) { necklaceSrc = src; loadImage(necklaceSrc).then(img => necklaceImg = img); }
function toggleCategory(cat) { document.getElementById('subcategory-buttons').style.display = 'flex'; document.querySelectorAll('#subcategory-buttons button').forEach(btn => btn.style.display = btn.innerText.toLowerCase().includes(cat) ? 'inline-block' : 'none'); document.getElementById('jewelry-options').style.display = 'none'; }
async function insertJewelryOptions(type, id) { const c = document.getElementById(id); c.innerHTML = '<p>Loading...</p>'; try { const res = await fetch(jsonURL); const data = await res.json(); c.innerHTML = ''; if (!data[type] || !data[type].length) { c.innerHTML = '<p>No designs available</p>'; return; } data[type].forEach(url => { const b = document.createElement('button'); const i = document.createElement('img'); i.src = url; b.appendChild(i); b.onclick = () => { if (type.includes('earrings')) changeEarring(url); else changeNecklace(url); }; c.appendChild(b); }); } catch (e) { console.error('Error loading jewelry data:', e); c.innerHTML = '<p>Error loading designs</p>'; } }
function selectJewelryType(t) { document.getElementById('jewelry-options').style.display = 'flex'; earringImg = null; necklaceImg = null; earringSrc = ''; necklaceSrc = ''; insertJewelryOptions(t, 'jewelry-options'); }
const faceMesh = new FaceMesh({ locateFile: (f) => `https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/${f}` });
faceMesh.setOptions({ maxNumFaces: 1, refineLandmarks: true, minDetectionConfidence: 0.6, minTrackingConfidence: 0.6 });
faceMesh.onResults((r) => { if (r.multiFaceLandmarks?.length) { const n = r.multiFaceLandmarks[0]; smoothedLandmarks = smoothedLandmarks ? smoothedLandmarks.map((p, i) => ({ x: p.x * SMOOTHING_FACTOR + n[i].x * (1 - SMOOTHING_FACTOR), y: p.y * SMOOTHING_FACTOR + n[i].y * (1 - SMOOTHING_FACTOR), z: p.z * SMOOTHING_FACTOR + n[i].z * (1 - SMOOTHING_FACTOR) })) : n; lastStableLandmarks = smoothedLandmarks; } canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height); if (lastStableLandmarks) drawJewelry(lastStableLandmarks, canvasCtx); });
const camera = new Camera(videoElement, { onFrame: async () => { await faceMesh.send({ image: videoElement }); }, width: 1280, height: 720 });
videoElement.addEventListener('loadedmetadata', () => { canvasElement.width = videoElement.videoWidth; canvasElement.height = videoElement.videoHeight; });
camera.start();
function drawJewelry(l, ctx) { if (!l || (earringSrc && !earringImg) || (necklaceSrc && !necklaceImg)) return; const eS = 0.07, nS = 0.18; const le = { x: l[132].x * canvasElement.width - 6, y: l[132].y * canvasElement.height - 16 }; const re = { x: l[361].x * canvasElement.width + 6, y: l[361].y * canvasElement.height - 16 }; const nk = { x: l[152].x * canvasElement.width - 8, y: l[152].y * canvasElement.height + 10 }; if (earringImg) { const w = earringImg.width * eS, h = earringImg.height * eS; ctx.drawImage(earringImg, le.x - w / 2, le.y, w, h); ctx.drawImage(earringImg, re.x - w / 2, re.y, w, h); } if (necklaceImg) { const w = necklaceImg.width * nS, h = necklaceImg.height * nS; ctx.drawImage(necklaceImg, nk.x - w / 2, nk.y, w, h); } }
function takeSnapshot() { if (!lastStableLandmarks) return alert("Face not detected. Please try again."); const snap = document.createElement('canvas'), ctx = snap.getContext('2d'); snap.width = videoElement.videoWidth; snap.height = videoElement.videoHeight; ctx.drawImage(videoElement, 0, 0, snap.width, snap.height); drawJewelry(lastStableLandmarks, ctx); lastSnapshotDataURL = snap.toDataURL('image/png'); document.getElementById('snapshot-preview').src = lastSnapshotDataURL; document.getElementById('snapshot-modal').style.display = 'block'; }
function saveSnapshot() { const link = document.createElement('a'); link.href = lastSnapshotDataURL; link.download = `jewelry-tryon-${Date.now()}.png`; document.body.appendChild(link); link.click(); document.body.removeChild(link); }
function shareSnapshot() { if (navigator.share) { fetch(lastSnapshotDataURL).then(res => res.blob()).then(blob => { const file = new File([blob], 'jewelry-tryon.png', { type: 'image/png' }); navigator.share({ title: 'Jewelry Try-On', text: 'Check out my look!', files: [file] }); }).catch(console.error); } else alert('Sharing not supported on this browser.'); }
function closeSnapshotModal() { document.getElementById('snapshot-modal').style.display = 'none'; }
function toggleInfoModal() { const m = document.getElementById('info-modal'); m.style.display = m.style.display === 'block' ? 'none' : 'block'; }